
/*

表: `logs`
```
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| log_id      | int     |
| ip          | varchar |
| status_code | int     |
+-------------+---------+
```
`log_id` 是这张表的唯一主键。
每一行包含服务器访问日志信息，包括 IP 地址和 HTTP 状态码。

编写一个解决方案来查找 `无效的` IP 地址。一个 IPv4 地址如果满足以下任何条件之一，则无效:
*   任何 8 位字节中包含大于 `255` 的数字
*   任何 8 位字节中含有 前导零 (如 `01.02.03.04`)
*   少于或多于 4 个 8 位字节

返回结果表分别以 `invalid_count`, `ip` 降序 排序。
结果格式如下所示。

示例:

输入:
`logs` 表:
```
+--------+---------------+-------------+
| log_id | ip            | status_code |
+--------+---------------+-------------+
| 1      | 192.168.1.1   | 200         |
| 2      | 256.1.2.3     | 404         |
| 3      | 192.168.001.1 | 200         |
| 4      | 192.168.1.1   | 200         |
| 5      | 192.168.1     | 500         |
| 6      | 256.1.2.3     | 404         |
| 7      | 192.168.001.1 | 200         |
+--------+---------------+-------------+
```
输出:
```
+---------------+----------------+
| ip            | invalid_count  |
+---------------+----------------+
| 256.1.2.3     | 2              |
| 192.168.001.1 | 2              |
| 192.168.1     | 1              |
+---------------+----------------+
```
解释:
`256.1.2.3` 是无效的, 因为 `256 > 255`
`192.168.001.1` 是无效的, 因为有前导零
`192.168.1` 是非法的, 因为只有 3 个 8 位字节
输出表分别以 `invalid_count`, `ip` 降序排序。


*/

WITH
-- 1. 模拟 Logs 表
Logs AS (
    SELECT 1 AS log_id, '192.168.1.1' AS ip, 200 AS status_code UNION ALL
    SELECT 2, '256.1.2.3', 404 UNION ALL
    SELECT 3, '192.168.001.1', 200 UNION ALL
    SELECT 4, '192.168.1.1', 200 UNION ALL
    SELECT 5, '192.168.1', 500 UNION ALL
    SELECT 6, '256.1.2.3', 404 UNION ALL
    SELECT 7, '192.168.001.1', 200
)
select
    ip,
    count(distinct log_id) invalid_count
from Logs t1
    lateral view explode(split(t1.ip, '\\.')) t2 as bit_number
where
-- 2. 检查每个 8 位字节是否大于 255
    cast(bit_number as int) > 255
   or
-- 3. 检查是否有前导零
    bit_number like '0%'
   or
-- 4. 检查是否有少于或多于 4 个 8 位字节
    size(split(t1.ip, '\\.')) != 4
group by t1.ip
order by invalid_count desc;

/*
hive中并未直接提供ip地址处理相关的系统内置函数
*/
